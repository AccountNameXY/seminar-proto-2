{"version":3,"sources":["Components/graph.js","Routes/helloScreen.js","config.js","Routes/bruteForce.js","Routes/netzplan.js","Components/sidebar.js","Components/header.js","Routes/byeScreen.js","App.js","serviceWorker.js","index.js"],"names":["Graph","props","getOption","tooltip","trigger","formatter","params","console","log","data","name","undefined","place","time","ressources","animationDurationUpdate","animationEasingUpdate","series","type","layout","symbolSize","roam","label","normal","show","edgeSymbol","edgeSymbolSize","edgeLabel","textStyle","fontSize","state","bubbles","links","lineStyle","opacity","width","curveness","flattendData","this","map","p","subprocesses","sub","push","newData","createBubbles","setState","previousProps","previousState","option","style","height","className","forEach","process","processIndex","subProc","subProcIndex","bubble","x","y","itemStyle","color","nextSubProc","nextSubProcIndex","link","source","target","subIndex","length","splice","i","allowBackstep","nextSubtype","subtype","subtypeIndex","nextProcessIndex","allLinks","addEndpoints","React","Component","HelloScreen","showMask","subQuestion","showOrga","showMainInput","mainName","handleInput","bind","newSubprocess","addSubprocess","addStep","onDragEnd","subprocess","Fragment","Col","lg","Text","onDragStart","Outline","weight","droppableId","provided","ref","innerRef","droppableProps","proc","index","key","id","draggableId","dragHandleProps","draggableProps","Row","margin","Frame","Dot","src","placeholder","WhiteFrame","procIndex","Wrapper","Button","onClick","Input","value","onChange","Space","result","steps","dest","destination","createNetzplan","newProcess","event","styled","h1","div","input","img","cursor","button","Number","config","Aufgabe","ErweiterungBruteForce","noUseCaseNetzplan","noUseCaseBruteForce","danksagung","Title","Subtitle","h3","ButtonText","Add","Background","Netzplan","inputValue","showInput","showNetzplan","handleChange","showUseCase","active","history","align","subtypes","onKeyDown","e","handleKeyDown","addSubtype","addProcess","Sidebar","Stickyness","Logo","Topbar","xl","size","offset","Divider","thickness","App","useCase","exact","path","component","bool","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e838d31.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\n\r\nclass Graph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n        // console.log(this.props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        var flattendData = []\r\n        this.props.data.map(p => p.subprocesses ? p.subprocesses.map(sub => flattendData.push(sub)) : flattendData.push(p))\r\n        var newData = this.createBubbles(flattendData)\r\n        this.setState({ bubbles: newData[0], links: newData[1] })\r\n    }\r\n\r\n    componentDidUpdate(previousProps, previousState) {\r\n        if (previousProps.data !== this.props.data) {\r\n            var flattendData = []\r\n            this.props.data.map(p => p.subprocesses ? p.subprocesses.map(sub => flattendData.push(sub)) : flattendData.push(p))\r\n            var newData = this.createBubbles(flattendData)\r\n\r\n            console.log(newData);\r\n            this.setState({ bubbles: newData[0], links: newData[1] })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return (\r\n            <ReactEcharts\r\n                option={this.getOption()}\r\n                style={{ height: '800px', width: '100%' }}\r\n                className='react_for_echarts' />\r\n        )\r\n    }\r\n\r\n    createBubbles(flattendData) {\r\n        var bubbles = []\r\n        var links = []\r\n        this.props.data.forEach((process, processIndex) => {\r\n            if (!process.subprocesses) {\r\n                var bubble = {\r\n                    name: process.name,\r\n                    time: process.time,\r\n                    place: process.place,\r\n                    ressources: process.ressources,\r\n                    x: 200,\r\n                    y: (processIndex + 1) * 50,\r\n                    itemStyle: { color: '#57D9A3' }\r\n                }\r\n                bubbles.push(bubble)\r\n                // console.log(this.props.data[processIndex + 1]);\r\n                console.log(\"proces\", process);\r\n\r\n                if (this.props.data[processIndex + 1]) {\r\n                    if (this.props.data[processIndex + 1].subprocesses) {\r\n                        this.props.data[processIndex + 1].subprocesses.forEach((sub, subIndex) => {\r\n                            console.log(\"sub\", sub);\r\n                            var link = {\r\n                                source: process.name,\r\n                                target: sub.name\r\n                            }\r\n                            links.push(link)\r\n                        })\r\n                    } else {\r\n                        var link = {\r\n                            source: process.name,\r\n                            target: this.props.data[processIndex + 1].name\r\n                        }\r\n                        links.push(link)\r\n                    }\r\n                } else {\r\n                    var link = {\r\n                        source: process.name,\r\n                        target: process[processIndex + 1]\r\n                    }\r\n                    links.push(link)\r\n                }\r\n\r\n            } else {\r\n                process.subprocesses.forEach((subProc, subProcIndex) => {\r\n                    var bubble = {\r\n                        name: subProc.name,\r\n                        time: subProc.time,\r\n                        place: subProc.place,\r\n                        ressources: subProc.ressources,\r\n                        x: subProcIndex * 200,\r\n                        y: (processIndex + 1) * 50,\r\n                        itemStyle: { color: '#57D9A3' }\r\n                    }\r\n                    bubbles.push(bubble)\r\n                    if (this.props.data[processIndex + 1]) {\r\n                        if (!this.props.data[processIndex + 1].subprocesses) {\r\n                            var link = {\r\n                                source: subProc.name,\r\n                                target: this.props.data[processIndex + 1].name\r\n                            }\r\n                            links.push(link)\r\n                        } else {\r\n                            this.props.data[processIndex + 1].subprocesses.forEach((nextSubProc, nextSubProcIndex) => {\r\n                                var link = {\r\n                                    source: subProc.name,\r\n                                    target: nextSubProc.name\r\n                                }\r\n                                console.log(link);\r\n                                links.push(link)\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n\r\n            if (processIndex === this.props.data.length - 1) {\r\n                if (process.subprocesses) {\r\n                    process.subprocesses.forEach((sub, subIndex) => {\r\n                        var link = {\r\n                            source: sub.name,\r\n                            target: \"End\"\r\n                        }\r\n                        links.push(link)\r\n                    })\r\n                } else {\r\n                    var link = {\r\n                        source: process.name,\r\n                        target: \"End\"\r\n                    }\r\n                    links.push(link)\r\n                }\r\n                bubbles.push({ name: \"End\", x: 200, y: (processIndex + 2) * 50, itemStyle: { color: '#F64747' }, symbolSize: \"50\" })\r\n            }\r\n\r\n        })\r\n\r\n        if (this.props.data[0].subprocesses) {\r\n            this.props.data[0].subprocesses.forEach((sub, subIndex) => {\r\n                var link = {\r\n                    source: \"Start\",\r\n                    target: sub.name\r\n                }\r\n                links.push(link)\r\n            })\r\n        } else {\r\n            var link = {\r\n                source: \"Start\",\r\n                target: this.props.data[0].name\r\n            }\r\n            links.push(link)\r\n        }\r\n        bubbles.splice(0, 0, { name: \"Start\", x: 200, y: 0, itemStyle: { color: '#F64747' }, symbolSize: \"50\" })\r\n\r\n\r\n        return [bubbles, links]\r\n    }\r\n\r\n    createBubbles2(flattendData) {\r\n        var bubbles = []\r\n        var links = []\r\n        this.props.data.forEach((process, processIndex) => {\r\n            if (process.subprocesses === undefined) {\r\n                var bubble =\r\n                {\r\n                    name: process.name,\r\n                    x: 0,\r\n                    y: (processIndex + 1) * 50,\r\n                    itemStyle: { color: '#57D9A3' }\r\n                }\r\n\r\n                for (var i = processIndex + 1; i < this.props.data.length; i++) {\r\n                    if (this.props.data[i].subprocesses === undefined) {\r\n                        var link = {\r\n                            source: process.name,\r\n                            target: this.props.data[i].name\r\n                        }\r\n                        links.push(link)\r\n                        if (this.props.data[i].allowBackstep) {\r\n                            const link = {\r\n                                source: this.props.data[i].name,\r\n                                target: process.name\r\n                            }\r\n                            links.push(link)\r\n                        }\r\n                    } else {\r\n                        this.props.data[i].subprocesses.forEach((nextSubtype) => {\r\n                            var link = {\r\n                                source: process.name,\r\n                                target: nextSubtype.name\r\n                            }\r\n                            links.push(link)\r\n                            if (nextSubtype.allowBackstep) {\r\n                                const link = {\r\n                                    source: nextSubtype.name,\r\n                                    target: process.name\r\n                                }\r\n                                links.push(link)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n                bubbles.push(bubble)\r\n\r\n            } else {\r\n                process.subprocesses.forEach((subtype, subtypeIndex) => {\r\n                    var bubble =\r\n                    {\r\n                        name: subtype.name,\r\n                        x: subtypeIndex * 200,\r\n                        y: (processIndex + 1) * 50,\r\n                        itemStyle: { color: '#57D9A3' }\r\n                    }\r\n                    for (var nextProcessIndex = processIndex + 1; nextProcessIndex < this.props.data.length; nextProcessIndex++) {\r\n                        if (this.props.data[nextProcessIndex].subprocesses === undefined) {\r\n\r\n                            var link = {\r\n                                source: subtype.name,\r\n                                target: this.props.data[nextProcessIndex].name\r\n                            }\r\n                            links.push(link)\r\n\r\n                            if (this.props.data[nextProcessIndex].allowBackstep) {\r\n                                const link = {\r\n                                    source: this.props.data[nextProcessIndex].name,\r\n                                    target: subtype.name,\r\n                                }\r\n                                links.push(link)\r\n                            }\r\n                        } else {\r\n                            this.props.data[nextProcessIndex].subprocesses.forEach((nextSubtype) => {\r\n                                var link = {\r\n                                    source: subtype.name,\r\n                                    target: nextSubtype.name\r\n                                }\r\n                                links.push(link)\r\n                                if (nextSubtype.allowBackstep) {\r\n                                    const link = {\r\n                                        source: nextSubtype.name,\r\n                                        target: subtype.name,\r\n                                    }\r\n                                    links.push(link)\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    bubbles.push(bubble)\r\n                })\r\n            }\r\n\r\n            if (processIndex === this.props.data.length - 1) {\r\n                bubbles.push({ name: \"End\", x: 200, y: (processIndex + 2) * 50, itemStyle: { color: '#F64747' }, symbolSize: \"50\" })\r\n            }\r\n        })\r\n\r\n        var allLinks = this.addEndpoints(links, flattendData)\r\n\r\n        bubbles.splice(0, 0, { name: \"Start\", x: 200, y: 0, itemStyle: { color: '#F64747' }, symbolSize: \"50\" })\r\n        return [bubbles, allLinks]\r\n    }\r\n\r\n    addEndpoints(links, flattendData) {\r\n        // flattendData.forEach(p => {\r\n        //     if (p.type !== 0) {\r\n        //         var link1 = {\r\n        //             source: \"Start\",\r\n        //             target: p.name\r\n        //         }\r\n        //         var link2 = {\r\n        //             source: p.name,\r\n        //             target: \"End\"\r\n        //         }\r\n        //         links.push(link1)\r\n        //         links.push(link2)\r\n        //     }\r\n\r\n        // })\r\n        // links.push({ source: \"Start\", target: \"End\" })\r\n\r\n        var startBubble = {\r\n\r\n        }\r\n        return links\r\n    }\r\n\r\n    getOption = () => ({\r\n        tooltip: {\r\n            trigger: 'item',\r\n            formatter: (params => {\r\n                console.log('params: ', params.data);\r\n                return 'Name: ' + params.data.name + (params.data.place !== undefined ? ' </br></br> Place: ' + params.data.place + '</br></br> Time: ' + params.data.time + '</br></br> Ressource: ' + params.data.ressources : \"\")\r\n            })\r\n        },\r\n\r\n        animationDurationUpdate: 1500,\r\n        animationEasingUpdate: 'quinticInOut',\r\n        series: [\r\n            {\r\n                type: 'graph',\r\n                layout: 'none',\r\n                symbolSize: 50,\r\n                roam: true,\r\n                label: {\r\n                    normal: {\r\n                        show: true\r\n                    }\r\n                },\r\n                edgeSymbol: ['circle', 'arrow'],\r\n                edgeSymbolSize: [4, 10],\r\n                edgeLabel: {\r\n                    normal: {\r\n                        textStyle: {\r\n                            fontSize: 20\r\n                        }\r\n                    }\r\n                },\r\n                data: this.state.bubbles,\r\n                links: this.state.links,\r\n                lineStyle: {\r\n                    normal: {\r\n                        opacity: 0.9,\r\n                        width: 1,\r\n                        curveness: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    })\r\n}\r\n\r\nexport default Graph","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport Graph from \"./../Components/graph\"\r\n\r\n\r\nconst pro = [\r\n    {\r\n        name: \"Druckart\",\r\n        id: \"item0\",\r\n        subprocesses: [\r\n            { name: \"Siebdruck\", time: \"1h 30min\", place: \"Station 1\", ressources: \"Farbe\", id: \"subitem-0\" },\r\n            { name: \"Bestickt\", time: \"3h\", place: \"Station 1\", ressources: \"Garn\", id: \"subitem-1\" },\r\n            { name: \"Digitaler Direktdruck\", time: \"20min\", place: \"Station 1\", ressources: \" - \", id: \"subitem-1\" }\r\n        ]\r\n    },\r\n    { name: \"Profi-Qualitätscheck\", time: \"1h\", place: \"Station 3\", ressources: \" - \", id: \"item-1\" },\r\n\r\n]\r\n\r\nclass HelloScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {\r\n            showMask: true,\r\n            name: \"\",\r\n            place: \"\",\r\n            subQuestion: false,\r\n            time: \"\",\r\n            ressources: \"\",\r\n            showOrga: false,\r\n            showMainInput: true,\r\n            mainName: \"\",\r\n            process: [],\r\n            // subQuestion: true\r\n        }\r\n\r\n        this.handleInput = this.handleInput.bind(this)\r\n        this.newSubprocess = this.newSubprocess.bind(this)\r\n        this.addSubprocess = this.addSubprocess.bind(this)\r\n        this.addStep = this.addStep.bind(this)\r\n        this.onDragEnd = this.onDragEnd.bind(this)\r\n    }\r\n\r\n    render() {\r\n        const { showMask, showOrga, process, subprocess, subQuestion, name, mainName, place, ressources, time, showMainInput, data } = this.state\r\n        return (\r\n            <React.Fragment>\r\n                {!showOrga ?\r\n                    <React.Fragment>\r\n                        {showMask &&\r\n\r\n                            <WhiteFrame>\r\n                                {process[0] &&\r\n                                    process.map((proc, procIndex) => {\r\n                                        return (\r\n                                            <React.Fragment>\r\n                                                {proc.subprocesses ?\r\n                                                    proc.subprocesses.length > 0 &&\r\n                                                    <WhiteFrame>\r\n                                                        <Row>\r\n                                                            <Frame margin=\"1em\">\r\n                                                                <Dot src=\"dot.png\" />\r\n                                                                <Number>{procIndex + 1}</Number>\r\n                                                            </Frame>\r\n                                                            <Text>{proc.name}</Text>\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            {proc.subprocesses.map((sub, subIndex) => {\r\n                                                                return (\r\n                                                                    <Col lg=\"4\" key={subIndex}>\r\n                                                                        <WhiteFrame>\r\n                                                                            <Frame>\r\n                                                                                <Dot src=\"dot.png\" />\r\n                                                                                <Number>{subIndex + 1}</Number>\r\n                                                                            </Frame>\r\n                                                                            <Text>Name: {sub.name}</Text>\r\n                                                                            <Text>Time: {sub.time}</Text>\r\n                                                                            <Text>Place: {sub.place}</Text>\r\n                                                                            <Text>Ressources: {sub.ressources}</Text>\r\n                                                                        </WhiteFrame>\r\n                                                                    </Col>\r\n                                                                )\r\n                                                            })}\r\n                                                        </Row>\r\n                                                    </WhiteFrame>\r\n                                                    :\r\n                                                    < WhiteFrame >\r\n                                                        <Col key={procIndex}>\r\n                                                            <Frame margin=\"1em\">\r\n                                                                <Dot src=\"dot.png\" />\r\n                                                                <Number>{procIndex + 1}</Number>\r\n                                                            </Frame>\r\n                                                            <Text>Name: {proc.name}</Text>\r\n                                                            <Text>Time: {proc.time}</Text>\r\n                                                            <Text>Place: {proc.place}</Text>\r\n                                                            <Text>Ressources: {proc.ressources}</Text>\r\n                                                        </Col>\r\n                                                    </WhiteFrame>\r\n                                                }\r\n                                            </React.Fragment>\r\n\r\n                                        )\r\n\r\n                                    })\r\n\r\n                                }\r\n                                <React.Fragment>\r\n                                    {subQuestion &&\r\n                                        <React.Fragment>\r\n                                            <Row>\r\n                                                <Wrapper>\r\n                                                    <Text>Will This Step Consist Of Multiple Substeps?</Text>\r\n                                                </Wrapper>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <Button onClick={this.newSubprocess}>Yes</Button>\r\n                                                </Col>\r\n                                                <Col >\r\n                                                    <Button onClick={() => this.setState({ subprocess: false, subQuestion: false })}>No</Button>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    }\r\n                                    {subprocess && showMainInput ?\r\n                                        <Row>\r\n                                            <Col lg=\"2\">\r\n                                                <Text>Name Step</Text>\r\n                                            </Col>\r\n                                            <Col lg=\"10\">\r\n                                                <Input value={mainName} onChange={this.handleInput} name=\"mainName\" placeholder=\"Enter Name here...\" />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                    {subQuestion ?\r\n                                        null\r\n                                        :\r\n                                        <React.Fragment>\r\n                                            <Row>\r\n                                                <Text>Add Information To Your Step</Text>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col lg=\"6\">\r\n                                                    <Row>\r\n                                                        <Col lg=\"1\">\r\n                                                            <Text>Name</Text>\r\n                                                        </Col>\r\n                                                        <Col lg=\"11\">\r\n                                                            <Input value={name} placeholder=\"Enter Name here...\" onChange={this.handleInput} name=\"name\" />\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Col>\r\n                                                <Col lg=\"6\">\r\n                                                    <Row>\r\n                                                        <Col lg=\"1\">\r\n                                                            <Text>Place</Text>\r\n                                                        </Col>\r\n                                                        <Col lg=\"11\">\r\n                                                            <Input placeholder=\"Enter Place here...\" onChange={this.handleInput} value={place} name=\"place\" />\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Col>\r\n                                                <Col lg=\"6\">\r\n                                                    <Row>\r\n                                                        <Col lg=\"1\">\r\n                                                            <Text>Time</Text>\r\n                                                        </Col>\r\n                                                        <Col lg=\"11\">\r\n                                                            <Input placeholder=\"Enter Time here...\" onChange={this.handleInput} value={time} name=\"time\" />\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Col>\r\n                                                <Col lg=\"6\">\r\n                                                    <Row>\r\n                                                        <Col lg=\"1\">\r\n                                                            <Text>Ressources</Text>\r\n                                                        </Col>\r\n                                                        <Col lg=\"11\">\r\n                                                            <Input placeholder=\"Enter Ressources here...\" onChange={this.handleInput} value={ressources} name=\"ressources\" />\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    }\r\n                                    {subprocess && showMask &&\r\n                                        <Row>\r\n                                            <Wrapper>\r\n                                                <Button onClick={this.addSubprocess}>Add Substep</Button>\r\n                                            </Wrapper>\r\n                                        </Row>\r\n                                    }\r\n                                    {!subprocess &&\r\n                                        <Row>\r\n                                            <Wrapper>\r\n                                                <Button onClick={this.addStep}>Add Step</Button>\r\n                                            </Wrapper>\r\n                                        </Row>\r\n                                    }\r\n                                </React.Fragment>\r\n                            </WhiteFrame>\r\n                        }\r\n\r\n                        <Col lg=\"12\">\r\n                            <Button onClick={() => this.setState({ showMask: true, subQuestion: true })}>\r\n                                Create New Step\r\n                            </Button>\r\n                            <Button onClick={() => this.setState({ showOrga: true })}>Organize Steps</Button>\r\n                        </Col>\r\n                        <Space></Space>\r\n                    </React.Fragment>\r\n                    :\r\n                    <React.Fragment>\r\n                        {process[0] &&\r\n                            <Col lg=\"9\">\r\n                                <React.Fragment>\r\n                                    <Text>Übersicht über alle Produktionsschritte</Text>\r\n                                    <Graph data={process} />\r\n                                </React.Fragment>\r\n                            </Col>\r\n                        }\r\n                        <Col lg=\"3\">\r\n\r\n                            <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n                                <Outline >\r\n                                    <Text weight={\"bold\"}>Alle Produktionsschritte</Text>\r\n                                    <Droppable droppableId=\"droppable-init\" >\r\n                                        {(provided) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.droppableProps}\r\n                                            >\r\n                                                {process.length === 0 ?\r\n                                                    null\r\n                                                    :\r\n                                                    process.map((proc, index) => {\r\n                                                        return (\r\n                                                            <Draggable key={proc.id} draggableId={proc.id} index={index}>\r\n                                                                {(provided) => (\r\n                                                                    <div ref={provided.innerRef} {...provided.dragHandleProps} {...provided.draggableProps}>\r\n                                                                        <Row key={index}>\r\n                                                                            <Col >\r\n                                                                                <Outline margin=\"1em\" width=\"80%\">\r\n                                                                                    <Text>{proc.name}</Text>\r\n                                                                                    <Frame>\r\n                                                                                        <Dot src=\"dot.png\" />\r\n                                                                                        <Number type={proc.name === \"\" ? \"input\" : \"reg\"}>{index + 1}</Number>\r\n                                                                                    </Frame>\r\n                                                                                </Outline>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n\r\n                                                                    </div>\r\n                                                                )}\r\n                                                            </Draggable>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                                {provided.placeholder}\r\n                                            </div>\r\n                                        )}\r\n                                    </Droppable>\r\n                                </Outline>\r\n                            </DragDropContext>\r\n                        </Col>\r\n                    </React.Fragment>\r\n                }\r\n            </React.Fragment >\r\n        )\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        const steps = [...this.state.process]\r\n        var dest = steps[result.destination.index]\r\n        var source = steps[result.source.index]\r\n\r\n        steps[result.source.index] = dest\r\n        steps[result.destination.index] = source\r\n\r\n        this.setState({ process: steps })\r\n        this.createNetzplan()\r\n    }\r\n\r\n    createNetzplan() {\r\n\r\n    }\r\n\r\n    newSubprocess() {\r\n        let process = [...this.state.process]\r\n        process.push({ name: \"\", id: \"item\" + process.length, subprocesses: [] })\r\n        this.setState({ subprocess: true, subQuestion: false, process: process, showMainInput: true, mainName: \"\" })\r\n    }\r\n\r\n    addStep() {\r\n        let process = [...this.state.process]\r\n        const newProcess = {\r\n            name: this.state.name,\r\n            time: this.state.time,\r\n            place: this.state.place,\r\n            ressources: this.state.ressources,\r\n            id: \"item-\" + process.length\r\n        }\r\n        process.push(newProcess)\r\n        this.setState({ process: process, name: \"\", place: \"\", ressources: \"\", time: \"\" })\r\n    }\r\n\r\n    addSubprocess() {\r\n        let process = [...this.state.process]\r\n        const subprocess = {\r\n            name: this.state.name,\r\n            time: this.state.time,\r\n            place: this.state.place,\r\n            ressources: this.state.ressources,\r\n            id: \"subitem-\" + process[process.length - 1].subprocesses.length\r\n        }\r\n        process[process.length - 1].subprocesses.push(subprocess)\r\n        process[process.length - 1].name = this.state.mainName\r\n        this.setState({ process: process, time: \"\", place: \"\", name: \"\", ressources: \"\", showMainInput: false })\r\n    }\r\n\r\n    handleInput(event) {\r\n        const target = event.target;\r\n        const value = target.value\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n}\r\n\r\nconst Title = styled.h1`\r\n    font-weight: bold;\r\n    margin: 0.5em auto;\r\n    `\r\n\r\nconst ButtonText = styled.div`\r\nmargin: 3em auto;;\r\ndisplay: inline;\r\npadding: 0 0.5em\r\n\r\n    `\r\n\r\nconst Input = styled.input`\r\n    border: 1px solid #D8DDE6;\r\n    padding: 0.25em 0.5em;\r\n    outline: none;\r\n    margin: 1em;\r\n    width: 80%\r\n`\r\n\r\n\r\n\r\nconst WhiteFrame = styled.div`\r\n    background-color: white;\r\n    width: 90%;\r\nmargin: ${props => props.margin ? props.margin : \"1em auto\"}\r\nborder: 1px solid #D8DDE6\r\n\r\n`\r\n\r\nconst Space = styled.div`\r\n    margin-bottom: 50em\r\n`\r\n\r\nconst Add = styled.img`\r\n    width: 1.2rem;\r\n    margin-left: 1em\r\n`\r\n\r\nconst Outline = styled.div`\r\n    border: 1px solid #D8DDE6;\r\n    min-width: 5em;\r\n    border-radius: 3px;\r\n    width: ${props => props.width ? props.width : null}\r\n    padding: 1em 0.5em;\r\n    // margi    n: 2em 5em;\r\n    display: inline-block;\r\n    cursor: ${props => props.cursor ? null : \"pointer\"};\r\n    margin: ${props => props.margin ? props.margin : \"2em auto\"}\r\n    : hover{\r\n        border : 1px solid #54698D\r\n    }\r\n`\r\n\r\nconst Background = styled.div`\r\n    width: 100%;\r\n    background-color: #FAFBFC;\r\n    `\r\n\r\n\r\n\r\nconst Wrapper = styled.div`\r\nmargin:auto\r\n`\r\n\r\n\r\nconst Button = styled.button`\r\n    background-color: #57D9A3;\r\n    color: white;\r\n    min-width: 10em;\r\n    margin: 3em 1em;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\n\r\nconst Text = styled.div`\r\n    margin: 1em;\r\n    `\r\n\r\nconst Frame = styled.div`\r\n    display: inline\r\n    position: relative\r\n    margin:${props => props.margin ? props.margin : \"0\"}\r\n`\r\n\r\nconst Dot = styled.img`\r\n    width: 1em\r\n`\r\n\r\nconst Number = styled.div`\r\n    color: white;\r\n    display: inline;\r\n    position: absolute;\r\n    width: 1em;\r\n    margin-top: ${props => props.type === \"input\" ? \"0.3em \" : \"0.03em\"};\r\n    left: 0;\r\n`\r\n\r\nexport default HelloScreen","import React from \"react\";\r\n\r\nexport const config = {\r\n    Aufgabe: <div>Versuchen Sie nachfolgenden Use Case umzusetzen: <br /> Sie möchten ein neues T-Shirt in Ihrem Onlineshop verkaufen. Dabei entstehen folgende Personalisierungsschritte: <br /> 1. Es gibt drei verschiedene Druckarten (Prozessschritt) mit den Subtypen (a) Siebdruck (b) digitaler Direktdruck (c) Bestickt. <br /> 2. Es ist möglich einen Qualitätscheck auszuwählen (Prozessschritt).<br /> 3. Der Nutzer kann sich das T-Shirt als Geschenk verpacken lassen (Prozessschritt).</div>,\r\n    ErweiterungBruteForce: <div>Erstellen sie nun alle für Sie sinvollen Kombinationen aus diesen Schritten </div>,\r\n    noUseCaseNetzplan: <div>Versuchen sie nun Ihren Use Case mit unserem Tool abzubilden. Unterteilen sie diesen in einzelne Schritte auf und lassen sie sich einen Netzplan als Übersicht erstellen.</div>,\r\n    noUseCaseBruteForce: <div>Versuchen sie nun Ihren Use Case ein weiteres mal abzubilden und per Drag-and-Drop alle möglichein Abläufe selbst zu erstellen.</div>,\r\n    danksagung: \"Vielen Dank, dass Sie an diesem Experiment teilgenommen haben. Uns ist es wichtig Feedback zu unserem Prototypen zu erhalten.Daher haben wir hierfür eine Umfrage eingerichtet.\"\r\n}","import React from 'react';\r\nimport { config } from \"./../config\"\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nclass BruteForce extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {\r\n            steps: [\r\n                // { name: \"Prozesschritt1\", id: \"item-0\" }, { name: \"Prozesschritt2\", id: \"item-1\" }, { name: \"Prozesschritt3\", id: \"item-2\" }\r\n            ],\r\n            processes: [\r\n                // {\r\n                //     steps:\r\n                //         [{ name: \"Prozesschritt1\", id: \"proc-0-item-0\" }, { name: \"Prozesschritt2\", id: \"proc-0-item-1\" }]\r\n                // },\r\n                // {\r\n                //     steps:\r\n                //         [{ name: \"Prozesschritt1\", id: \"proc-1-item-0\" }, { name: \"Prozesschritt2\", id: \"proc-1-item-1\" }]\r\n                // }\r\n            ],\r\n            newValue: \"\",\r\n            showNewDroppable: false\r\n        }\r\n        this.addName = this.addName.bind(this)\r\n        this.onDragStart = this.onDragStart.bind(this)\r\n        this.onDragEnd = this.onDragEnd.bind(this)\r\n        this.shiftWithinFirstDroppable = this.shiftWithinFirstDroppable.bind(this)\r\n        this.shiftWithinProcess = this.shiftWithinProcess.bind(this)\r\n        this.addProcess = this.addProcess.bind(this)\r\n        this.keyPressed = this.keyPressed.bind(this)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { steps, processes } = this.state\r\n        return (\r\n            <React.Fragment>\r\n                <Background>\r\n                    <Row>\r\n                        <Col>\r\n                            <Row>\r\n                                <Col >\r\n                                    <Title>Variante 2</Title>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Subtitle>Ihre Aufgabe</Subtitle>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {this.props.showUseCase ?\r\n                                        config &&\r\n                                        <React.Fragment>\r\n                                            <Text>Im Vergleich zu Variante 1, erstellt sich dieses System nach Fertigstellung\r\n                                                der möglichen Prozessschritte nicht selbst und bildet dabei auch nicht alle möglichen\r\n                                                Kombinationen ab.\r\n                                                Dies hat folgenden Grund: Falls Sie nun in Ihrem Onlineshop ein personalisiertes\r\n                                                T-Shirt anbieten, so hat der Nutzer häufig verschiedene Auswahlmöglichkeiten\r\n                                                bei der Bestellung (in dieser Aufgabe: Druckarten mit Input, Qualitätscheck\r\n                                                und Verpackung).\r\n                                                Für jede mögliche Kombination, die Sie in Ihrem Onlineshop anbieten möchten, erstellen\r\n                                                Sie dann einen eigenen Herstellungsablauf. Dabei muss dann auch nicht mehr in\r\n                                                Prozessschritt und Subtyp unterschieden werden, da direkt der Subtyp eingesetzt wird.\r\n                                            </Text>\r\n                                            <Text>Zunächst werden alle Prozesschritte erstellt und daraufhin per Drag-and-Drop die möglichen Kombinationen abgebildet. </Text>\r\n                                            <Text>{config.Aufgabe}</Text>\r\n                                            {/* <Text>{config.ErweiterungBruteForce}</Text> */}\r\n\r\n                                            <Text>\r\n                                                Sie möchten nun aber nur drei verschiedene Kombinationen der Personalisierungsschritte in Ihrem Onlineshop anbieten.\r\n                                                <br />\r\n                                                <br />\r\n                                                1. Digitaler Direktdruck  =>  Qualitätscheck  => Geschenkverpackung\r\n                                                <br />\r\n                                                2. Bestickt  =>  Geschenkverpackung\r\n                                                <br />\r\n                                                3. Siebdruck  =>  Qualitätscheck\r\n\r\n                                            </Text>\r\n                                        </React.Fragment>\r\n\r\n                                        :\r\n\r\n                                        <Text>{config.noUseCaseBruteForce}</Text>\r\n\r\n                                    }\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <DragDropContext onDragEnd={this.onDragEnd.bind(this)} onDragStart={this.onDragStart.bind(this)}>\r\n                        <Row >\r\n                            {/* INITIAL STEPS */}\r\n                            <Col lg=\"4\" xl=\"4\">\r\n                                <Outline>\r\n                                    <Text weight={\"bold\"}>Alle Personalisierungsschritte</Text>\r\n                                    <Droppable droppableId=\"droppable-init\" >\r\n                                        {(provided) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.droppableProps}\r\n                                            >\r\n                                                {steps.length === 0 ?\r\n                                                    null\r\n                                                    :\r\n                                                    steps.map((step, index) => {\r\n                                                        return (\r\n                                                            <Draggable key={step.id} draggableId={step.id} index={index}>\r\n                                                                {(provided) => (\r\n                                                                    <div ref={provided.innerRef} {...provided.dragHandleProps} {...provided.draggableProps}>\r\n                                                                        <Row key={index}>\r\n                                                                            <Col >\r\n                                                                                <Outline margin=\"1em\">\r\n                                                                                    {step.name !== \"\" ?\r\n                                                                                        <ButtonText>{step.name}</ButtonText>\r\n                                                                                        :\r\n                                                                                        <Input onChange={this.handleInput.bind(this)} placeholder=\"Benenne Prozesschritt...\" onBlur={() => this.addName(index)} onKeyDown={this.keyPressed} />\r\n                                                                                    }\r\n                                                                                    <Frame>\r\n                                                                                        <Dot src=\"dot.png\" />\r\n                                                                                        <Number type={step.name === \"\" ? \"input\" : \"reg\"}>{index + 1}</Number>\r\n                                                                                    </Frame>\r\n                                                                                </Outline>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n\r\n                                                                    </div>\r\n                                                                )}\r\n                                                            </Draggable>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                                {provided.placeholder}\r\n                                                <Row>\r\n                                                    <Col lg=\"auto\">\r\n                                                        <Outline margin=\"2em\">\r\n                                                            <ButtonText>Schritt hinzufügen </ButtonText>\r\n                                                            <Add src=\"plus.svg\" onClick={this.addMainStep.bind(this)} />\r\n                                                        </Outline>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </div>\r\n                                        )}\r\n                                    </Droppable>\r\n                                </Outline>\r\n                            </Col>\r\n                            {/* Processes */}\r\n                            {processes.length !== 0 &&\r\n                                processes.map((process, index) => (\r\n                                    <Col lg=\"4\" xl=\"4\" key={index}>\r\n                                        <Droppable droppableId={\"droppable-\" + index} key={index}>\r\n                                            {(provided) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.droppableProps}>\r\n                                                    <Outline key={index}  >\r\n                                                        <Text weight={\"bold\"}>Prozess {index + 1}</Text>\r\n                                                        {process.steps.map((step, index) => {\r\n                                                            return (\r\n                                                                <Draggable key={step.id} draggableId={step.id} index={index}>\r\n                                                                    {(provided) => (\r\n                                                                        <div ref={provided.innerRef} {...provided.dragHandleProps} {...provided.draggableProps}>\r\n                                                                            <Row key={index}>\r\n                                                                                <Col >\r\n                                                                                    <Outline margin=\"1em\" >\r\n                                                                                        {process.name !== \"\" ?\r\n                                                                                            <ButtonText>{step.name}</ButtonText>\r\n                                                                                            :\r\n                                                                                            <Input onChange={this.handleInput.bind(this)} onBlur={() => this.addName(index)} />\r\n                                                                                        }\r\n                                                                                        <Frame>\r\n                                                                                            <Dot src=\"dot.png\" />\r\n                                                                                            <Number>{index + 1}</Number>\r\n                                                                                        </Frame>\r\n                                                                                    </Outline>\r\n                                                                                </Col>\r\n                                                                            </Row>\r\n\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </Draggable>\r\n                                                            )\r\n                                                        })}\r\n                                                        {provided.placeholder}\r\n                                                    </Outline>\r\n                                                </div>\r\n                                            )}\r\n                                        </Droppable>\r\n                                    </Col>\r\n                                ))\r\n                            }\r\n                        </Row>\r\n                        {/* NEW Process */}\r\n                        <Droppable droppableId=\"droppable-new\">\r\n                            {(provided) => (\r\n                                <Wrapper>\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.droppableProps}>\r\n                                        <Outline>\r\n                                            Personalisierungsschritte in dieses <br /> Feld ziehen, um neuen Prozess zu erstellen.\r\n                                    </Outline>\r\n                                    </div>\r\n                                </Wrapper>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                    <Button onClick={() => this.props.history.push(\"/byeScreen\")}>Weiter</Button>\r\n                </Background>\r\n            </React.Fragment >\r\n        )\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        if (result.destination !== null) {\r\n            if (((result.destination.droppableId === result.source.droppableId) && (result.destination.index !== result.source.index))) {\r\n                ((result.destination.droppableId === \"droppable-init\") && (result.source.droppableId === \"droppable-init\")) ? this.shiftWithinFirstDroppable(result) : this.shiftWithinProcess(result)\r\n            } else if ((result.source.droppableId === \"droppable-init\") && (result.destination.droppableId === \"droppable-new\")) {\r\n                this.addProcess(result)\r\n            } else if (result.destination.droppableId !== result.source.droppableId) {\r\n                this.addSteptoProcess(result)\r\n            }\r\n        }\r\n    }\r\n\r\n    onDragStart(result) {\r\n        if (result.source.droppableId === \"droppable-init\") {\r\n            this.setState({ showNewDroppable: true })\r\n        }\r\n    }\r\n\r\n    shiftWithinFirstDroppable(result) {\r\n        const steps = [...this.state.steps]\r\n        var dest = steps[result.destination.index]\r\n        var source = steps[result.source.index]\r\n\r\n        steps[result.source.index] = dest\r\n        steps[result.destination.index] = source\r\n\r\n        this.setState({ steps: steps })\r\n    }\r\n\r\n    addSteptoProcess(result) {\r\n        var steps = [...this.state.steps]\r\n        var processes = [...this.state.processes]\r\n        var droppableIndex = result.destination.droppableId.slice(-1)\r\n        // var step = steps[result.source.index]\r\n        var lastDraggableID = processes[droppableIndex].steps[processes[droppableIndex].steps.length - 1].id + 1\r\n        var id = \"proc-\" + droppableIndex + \"-\" + lastDraggableID\r\n\r\n        processes[droppableIndex].steps.splice(result.destination.index, 0, { name: steps[result.source.index].name, id: id })\r\n        // var secondHalf = processes[droppableIndex].steps.splice(result.destination.index, processes[droppableIndex].steps.length)\r\n\r\n    }\r\n\r\n    shiftWithinProcess(result) {\r\n        const droppableIndex = result.destination.droppableId.slice(-1)\r\n        var process = [...this.state.processes]\r\n        var steps = process[droppableIndex].steps\r\n        var dest = steps[result.destination.index]\r\n        var source = steps[result.source.index]\r\n\r\n        steps[result.source.index] = dest\r\n        steps[result.destination.index] = source\r\n        process[droppableIndex].steps = steps\r\n\r\n        this.setState({ processes: process })\r\n\r\n    }\r\n\r\n    addProcess(result) {\r\n        var processes = [...this.state.processes]\r\n        if (result.destination.droppableId === \"droppable-new\") {\r\n            const newProcess = {\r\n                steps: [\r\n                    { name: this.state.steps[result.source.index].name, id: \"proc-\" + this.state.processes.length + \"-item-0\" }\r\n                ]\r\n            }\r\n            processes.push(newProcess)\r\n            // console.log(newProcess);\r\n            this.setState({ processes: processes })\r\n        }\r\n    }\r\n\r\n    handleInput(event) {\r\n        // console.log(event.target.value);\r\n        this.setState({\r\n            newValue: event.target.value\r\n        })\r\n    }\r\n\r\n    keyPressed(event) {\r\n        if (event.key === \"Enter\") {\r\n            this.addName(this.state.steps.length - 1)\r\n        }\r\n    }\r\n\r\n    addMainStep() {\r\n        const steps = [...this.state.steps]\r\n        var draggableID = steps.length === 0 ? 0 : steps[steps.length - 1].id.slice(-1) + 1\r\n        steps.push({ name: \"\", id: `item-${draggableID}`, substeps: [] })\r\n\r\n        this.setState({ steps: steps })\r\n    }\r\n\r\n    addName(index) {\r\n        const steps = [...this.state.steps]\r\n        steps[index].name = this.state.newValue\r\n        steps[index].id = `item-${index}`\r\n\r\n        this.setState({\r\n            steps: steps\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    margin:auto\r\n`\r\nconst Button = styled.button`\r\n    background-color: #57D9A3;\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\nconst Frame = styled.div`\r\n    display: inline\r\n    position: relative\r\n`\r\n\r\nconst Dot = styled.img`\r\n    width: 1em\r\n`\r\n\r\nconst Number = styled.div`\r\n    color: white;\r\n    display: inline;\r\n    position: absolute;\r\n    width: 1em;\r\n    margin-top: ${props => props.type === \"input\" ? \"0.3em \" : \"0.03em\"};\r\n    left: 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n    border: 1px solid #D8DDE6;\r\n    padding: 0.25em 0.5em;\r\n    outline: none;\r\n    width: 80%\r\n`\r\n\r\nconst Title = styled.h1`\r\nfont - weight: bold;\r\nmargin: 0.5em auto;\r\n`\r\n\r\nconst Subtitle = styled.h3`\r\nmargin - top: 0.5em\r\n    `\r\n\r\nconst Text = styled.div`\r\nmargin: 1em auto;\r\n padding: 0 5 %;\r\nfont - weight: ${ props => props.weight ? props.weight : null}\r\n\r\n`\r\nconst ButtonText = styled.div`\r\nmargin: 3em auto;;\r\ndisplay: inline;\r\npadding: 0 0.5em\r\n\r\n    `\r\n\r\nconst Add = styled.img`\r\nwidth: 1.2rem;\r\nmargin - left: 1em\r\n    `\r\n\r\nconst Background = styled.div`\r\nwidth: 100%;\r\nbackground-color: #FAFBFC;\r\n`\r\n\r\nconst Outline = styled.div`\r\nborder: 1px solid #D8DDE6;\r\nmin-width: 5em;\r\nborder-radius: 3px;\r\npadding: 1em 0.5em;\r\n// margi    n: 2em 5em;\r\ndisplay: inline - block;\r\ncursor: ${props => props.cursor ? null : \"pointer\"};\r\nmargin: ${ props => props.margin ? props.margin : \"2em 5em\"}\r\n    : hover{\r\n    border: 1px solid #54698D\r\n}\r\n`\r\n\r\nexport default BruteForce","import React from 'react';\r\nimport { config } from \"./../config\"\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\nimport Graph from \"./../Components/graph\"\r\n\r\n\r\nconst data = [\r\n    // {\r\n    //     name: \"Schritt 1\",\r\n    //     type: 0,\r\n    //     allowBackstep: true,\r\n    //     itemStyle: \"#57D9A3\",\r\n    //     subtypes: [\r\n    //         {\r\n    //             name: \"Schritt 1.1\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 1.2\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 1.3\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         }\r\n    //     ],\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 11\",\r\n    //     type: \"m\",\r\n    //     allowBackstep: false,\r\n\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 2\",\r\n    //     type: 0,\r\n    //     allowBackstep: false,\r\n    //     subtypes: [\r\n    //         {\r\n    //             name: \"Schritt 2.1\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: true\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 2.2\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 2.3\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         }\r\n    //     ],\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 3\",\r\n    //     type: 0,\r\n    //     allowBackstep: false,\r\n    //     subtypes: [\r\n    //         {\r\n    //             name: \"Schritt 3.1\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: true\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 3.2\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 3.3\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         }\r\n    //     ]\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 33\",\r\n    //     type: \"m\",\r\n    //     allowBackstep: false\r\n\r\n    // },\r\n]\r\n\r\n\r\nclass Netzplan extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {\r\n            inputValue: [],\r\n            showInput: [],\r\n            showNetzplan: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            data: data\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        var { data, showInput, showNetzplan } = this.state\r\n        return (\r\n            <Background>\r\n                <Row>\r\n                    <Col>\r\n                        <Row>\r\n                            <Col >\r\n                                <Title>Variante 1</Title>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Subtitle>Ihre Aufgabe</Subtitle>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                {this.props.showUseCase ?\r\n\r\n                                    config &&\r\n                                    <React.Fragment>\r\n                                        < Text >{config.Aufgabe}</Text><br />\r\n                                        <Text>Lassen Sie sich daraufhin Ihren personalisierten Netzplan erstellen.</Text><br />\r\n                                    </React.Fragment>\r\n                                    :\r\n                                    <Text>{config.noUseCaseNetzplan}</Text>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                </Row>\r\n\r\n\r\n                {\r\n                    showNetzplan ?\r\n                        <React.Fragment>\r\n                            <Graph data={data} />\r\n                            <Row>\r\n                                <Col lg=\"6\">\r\n                                    <Button active={true} onClick={() => this.setState({ showNetzplan: false })}>zurückspringen</Button>\r\n                                </Col>\r\n                                <Col lg=\"6\">\r\n                                    <Button color={\"#57D9A3\"} onClick={() => this.props.history.push(\"bruteforce\")}>Zur nächsten Aufgabe</Button>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </React.Fragment>\r\n                        :\r\n                        <React.Fragment>\r\n                            {/* <Row>\r\n                                <Col lg=\"3\">\r\n                                    <Text margin={\"1em 0 0 0\"}>Erstelle einen Schritt</Text>\r\n                                </Col>\r\n                            </Row> */}\r\n                            <Row>\r\n                                <Col>\r\n                                    <WhiteFrame color={\"white\"} >\r\n                                        {data &&\r\n                                            <React.Fragment>\r\n                                                {data.map((process, processIndex) => (\r\n                                                    <Col lg=\"12\" key={processIndex}>\r\n                                                        <WhiteFrame margin={\"1em 5em\"}>\r\n                                                            <Row>\r\n\r\n                                                                <Col lg=\"6\">\r\n                                                                    <Row>\r\n                                                                        <Text align={\"left\"} margin={\"0em 0.5em\"}>Typ</Text>\r\n                                                                        <Frame>\r\n                                                                            <Dot src=\"dot.png\" />\r\n                                                                            <Number>{processIndex + 1}</Number>\r\n                                                                        </Frame>\r\n                                                                    </Row>\r\n\r\n                                                                    <Row>\r\n                                                                        <Outline>\r\n                                                                            <ButtonText>{process.name}</ButtonText>\r\n                                                                            <Frame>\r\n                                                                                <Dot src=\"dot.png\" />\r\n                                                                                <Number>{processIndex + 1}</Number>\r\n                                                                            </Frame>\r\n                                                                        </Outline>\r\n                                                                    </Row>\r\n                                                                </Col>\r\n                                                                <Col lg=\"6\">\r\n                                                                    <Text align={\"left\"}>Subtyp</Text>\r\n                                                                    {process.subtypes ?\r\n                                                                        process.subtypes.map((subtype, subtypeIndex) => (\r\n                                                                            <React.Fragment key={subtypeIndex}>\r\n                                                                                <Row>\r\n                                                                                    <Outline>\r\n                                                                                        <ButtonText>{subtype.name}</ButtonText>\r\n                                                                                        <Frame>\r\n                                                                                            <Dot src=\"dot.png\" />\r\n                                                                                            <Number>{subtypeIndex + 1}</Number>\r\n                                                                                        </Frame>\r\n                                                                                    </Outline>\r\n\r\n                                                                                </Row>\r\n                                                                                {process.subtypes.length - 1 === subtypeIndex &&\r\n                                                                                    <Row>\r\n                                                                                        <Outline onClick={showInput[processIndex] === true ? null : () => this.showInput(processIndex)}>\r\n                                                                                            {showInput[processIndex] === true ?\r\n                                                                                                <Input placeholder=\"Subtypen benennen\" onKeyDown={((e) => this.handleKeyDown(e, processIndex, \"sub\"))} onChange={(e) => this.handleChange(e, processIndex)}></Input>\r\n                                                                                                :\r\n                                                                                                <ButtonText>Subtypen hinzufügen</ButtonText>\r\n                                                                                            }\r\n                                                                                            <Add src=\"plus.svg\" onClick={showInput[processIndex] === true ? () => this.addSubtype(processIndex) : null} />\r\n                                                                                        </Outline>\r\n                                                                                    </Row>\r\n                                                                                }\r\n                                                                            </React.Fragment>\r\n                                                                        ))\r\n\r\n                                                                        :\r\n                                                                        <Row>\r\n                                                                            <Outline onClick={showInput[processIndex] === true ? null : () => this.showInput(processIndex)} >\r\n                                                                                {showInput[processIndex] === true ?\r\n                                                                                    <Input placeholder=\"Subtypen benennen\" onKeyDown={((e) => this.handleKeyDown(e, processIndex, \"sub\"))} onChange={(e) => this.handleChange(e, processIndex)}></Input>\r\n                                                                                    :\r\n                                                                                    <ButtonText>Subtypen hinzufügen</ButtonText>\r\n                                                                                }\r\n                                                                                <Add src=\"plus.svg\" onClick={showInput[processIndex] === true ? () => this.addSubtype(processIndex) : null} />\r\n                                                                            </Outline>\r\n\r\n                                                                        </Row>\r\n                                                                    }\r\n                                                                </Col>\r\n                                                            </Row>\r\n\r\n                                                        </WhiteFrame>\r\n                                                    </Col>\r\n                                                ))\r\n                                                }\r\n                                                <Row>\r\n                                                    <Wrapper>\r\n                                                        <Outline onClick={showInput[data.length] === true ? null : () => this.showInput(data.length)} >\r\n                                                            {showInput[data.length] === true ?\r\n                                                                <Input placeholder=\"Prozessschritt benennen\" onKeyDown={((e) => this.handleKeyDown(e, data.length, \"main\"))} onChange={(e) => this.handleChange(e, data.length)}></Input>\r\n                                                                :\r\n                                                                <ButtonText>Prozessschritt hinzufügen</ButtonText>\r\n                                                            }\r\n                                                            <Add src=\"plus.svg\" onClick={showInput[data.length] === true ? () => this.addProcess() : null} />\r\n                                                        </Outline>\r\n                                                    </Wrapper>\r\n\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Button active={data.length !== 0} onClick={() => data.length !== 0 ? this.setState({ showNetzplan: true }) : null}>Erstelle Netzplan</Button>\r\n                                                </Row>\r\n\r\n                                            </React.Fragment>\r\n                                        }\r\n                                    </WhiteFrame>\r\n                                </Col>\r\n                            </Row>\r\n                        </React.Fragment>\r\n                }\r\n                <Space></Space>\r\n            </Background >\r\n        )\r\n    }\r\n\r\n    handleKeyDown(e, index, type) {\r\n        if (e.key === \"Enter\") {\r\n            if (type === \"main\") {\r\n                this.addProcess()\r\n            } else {\r\n                this.addSubtype(index)\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange(event, index) {\r\n        var inputValue = [...this.state.inputValue]\r\n        inputValue[index] = event.target.value\r\n        this.setState({ inputValue: inputValue })\r\n    }\r\n\r\n    showInput(index) {\r\n        var showInput = [...this.state.showInput]\r\n        showInput[index] = true\r\n        this.setState({ showInput: showInput })\r\n    }\r\n\r\n    addProcess() {\r\n        var data = [...this.state.data]\r\n        var showInput = [...this.state.showInput]\r\n        showInput[data.length] = false\r\n        data.push({ name: this.state.inputValue[data.length], type: \"m\", allowBackstep: false })\r\n        this.setState({ data: data })\r\n    }\r\n\r\n\r\n    addSubtype(index) {\r\n        var data = [...this.state.data]\r\n        var showInput = [...this.state.showInput]\r\n        showInput[index] = false\r\n\r\n        if (data[index].subtypes === undefined) {\r\n            data[index].subtypes = []\r\n        }\r\n        data[index].subtypes.push({ name: this.state.inputValue[index], type: \"s\", allowBackstep: true })\r\n\r\n        this.setState({ data: data, showInput: showInput })\r\n    }\r\n}\r\n\r\nconst Title = styled.h1`\r\nfont-weight: bold;\r\nmargin: 0.5em auto; \r\n`\r\n\r\nconst Button = styled.button`\r\n    background-color: ${props => props.color ? props.color : props.active ? \"#F64747\" : \"grey\"};\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\nconst Space = styled.div`\r\n    margin-bottom: 30em\r\n`\r\n\r\n\r\nconst Subtitle = styled.h3`\r\nmargin-top: 0.5em\r\n`\r\n\r\nconst ButtonText = styled.div`\r\nmargin: 3em auto;\r\ndisplay: inline;\r\npadding: 0 0.5em\r\n\r\n`\r\n\r\nconst Input = styled.input`\r\n    outline: none\r\n`\r\n\r\n\r\nconst Add = styled.img`\r\nwidth: 1.2rem;\r\nmargin - left: 1em\r\n    `\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 1em auto\r\n`\r\n\r\n\r\nconst Frame = styled.div`\r\n    display: inline\r\n    position: relative\r\n`\r\n\r\nconst Number = styled.div`\r\n    color: white;\r\n    display: inline;\r\n    position: absolute;\r\n    width: 1em;\r\n    margin-top: ${props => props.type === \"input\" ? \"0.3em \" : \"0.03em\"};\r\n    left: 0;\r\n`\r\n\r\nconst Dot = styled.img`\r\n    width: 1em\r\n`\r\n\r\n\r\nconst Outline = styled.div`\r\n    border: 1px solid #D8DDE6;\r\n    min-width: 10em;\r\n    border-radius: 3px;\r\n    padding: 1em 0.5em;\r\n    margin: 1em 3em;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    margin: ${ props => props.margin ? props.margin : null}\r\n    : hover{\r\n        border: 1px solid #54698D\r\n    }\r\n`\r\n\r\nconst Text = styled.div`\r\ntext-align: ${props => props.align ? props.align : null};\r\nmargin: ${props => props.margin ? props.margin : \"0.5em 3em\"}; \r\npadding: 0 0.5em\r\n`\r\n\r\nconst Background = styled.div`\r\nwidth: 100%;\r\nbackground-color: #FAFBFC;\r\n`\r\n\r\nconst WhiteFrame = styled.div`\r\nbackground-color: white;\r\nwidth: 90%;\r\nmargin: ${props => props.margin ? props.margin : \"1em auto\"}\r\nborder: 1px solid #D8DDE6\r\n\r\n`\r\n\r\nexport default Netzplan","import React from 'react';\r\nimport styled from \"styled-components\"\r\n// import { Row, Col } from 'reactstrap';\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <Stickyness>\r\n                    <Logo src=\"tud_logo.png\" />\r\n                    <Background>\r\n\r\n                        <Logo src=\"hda.svg\" />\r\n                    </Background>\r\n                    <Topbar>Cross Domain Challenge</Topbar>\r\n                </Stickyness>\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    height: 100%;\r\n    background-color: #2F394E\r\n`\r\n\r\nconst Stickyness = styled.div`\r\n    position: sticky; \r\n    top: 0\r\n`\r\n\r\nconst Background = styled.div`\r\n    margin: 1em;\r\n    border-radius: 8px;\r\n    background-color: white;\r\n`\r\n\r\n\r\nconst Topbar = styled.div`\r\n    color: white;\r\n    font-weight: bold;\r\n    margin: 0em auto; \r\n    // padding-top: 1em\r\n`\r\n\r\nconst Logo = styled.img`\r\n    max-width: 100%;\r\n    border-radius: 20px; \r\n    padding: 1em;\r\n    margin-top: 1em; \r\n`\r\n\r\n\r\nexport default Sidebar","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\n\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col xl={{ size: 6, offset: 3 }} lg={{ size: 6, offset: 3 }} >\r\n                        <Input placeholder=\"Finde Produkte, Kunden oder Bestellungen !\" />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Divider color={\"#D8DDE6\"} thickness={\"1px\"} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xl={{ size: \"auto\", offset: 0 }} lg={{ size: \"auto\", offset: 0 }} >\r\n                        <Text>Individualisierungsprozess</Text>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Divider color={\"#57D9A3\"} thickness={\"2px\"} />\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst Input = styled.input`\r\n    height: 2em;\r\n    width: 100%;\r\n    outline: none;\r\n    padding: 1em 0.5em;\r\n    border: 1px solid #D8DDE6;\r\n    border-radius: 2px;\r\n    margin: 2em 0;\r\n`\r\n\r\nconst Divider = styled.div`\r\n    height: ${props => props.thickness ? props.thickness : \"1px\"};\r\n    width: 100%;\r\n    background: ${props => props.color ? props.color : \"white\"};\r\n`\r\n\r\nconst Text = styled.div`\r\n    color: #54698D;\r\n    font-weight: bold;\r\n    margin: 1.5em;\r\n`\r\n\r\n\r\n\r\n\r\nexport default Sidebar","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport { config } from \"./../config\"\r\n\r\nclass ByeScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Col>\r\n                    <Title>Feedback</Title>\r\n                    <Text>Vielen Dank, dass Sie an diesem Experiment teilgenommen haben. </Text>\r\n                    <Text>Uns ist es wichtig Feedback zu unserem Prototyp zu erhalten. Daher haben wir hierfür eine Umfrage eingerichtet.</Text>\r\n\r\n                    <Button onClick={this.handleClick}>Zur Umfrage</Button>\r\n\r\n                    <Space></Space>\r\n                </Col>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    handleClick() {\r\n        window.location.replace(\"https://survey.sogosurvey.com/r/KUX0jg\")\r\n    }\r\n}\r\n\r\nconst Title = styled.h1`\r\n    font - weight: bold;\r\n    margin: 0.5em auto;\r\n`\r\nconst Space = styled.div`\r\n    margin-bottom: 30em\r\n`\r\n\r\nconst Text = styled.div`\r\n    margin: 1em auto;\r\n    padding: 0 5 %;\r\n    font - weight: ${ props => props.weight ? props.weight : null}\r\n`\r\n\r\n\r\n\r\nconst Button = styled.button`\r\n    background-color: #57D9A3;\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\nexport default ByeScreen","import React, { Component } from \"react\";\nimport './App.css';\nimport HelloScreen from './Routes/helloScreen';\nimport BruteForce from \"./Routes/bruteForce\";\nimport Netzplan from \"./Routes/netzplan\";\nimport Sidebar from \"./Components/sidebar\"\nimport Header from \"./Components/header\"\nimport { Row, Col } from 'reactstrap';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport ByeScreen from \"./Routes/byeScreen\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.props = props\n    this.state = {}\n    this.useCase = this.useCase.bind(this)\n  }\n\n  render() {\n    const { showUseCase } = this.state\n    return (\n      <div className=\"App\" >\n        <Row>\n          <Col xl=\"2\" lg=\"2\">\n            <Sidebar />\n          </Col>\n          <Col xl=\"10\" lg=\"10\">\n            <Row>\n              <Col>\n                <Header />\n              </Col>\n            </Row>\n            <Row>\n              <Router>\n                <Route exact path=\"/\" component={(props) => < HelloScreen {...props} useCase={this.useCase} />} />\n                <Route path=\"/netzplan\" component={(props) => < Netzplan {...props} showUseCase={true} />} />\n              </Router>\n            </Row>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n\n  useCase(bool) {\n    this.setState({ showUseCase: bool })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}